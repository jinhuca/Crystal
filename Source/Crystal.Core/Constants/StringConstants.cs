namespace Crystal.Constants;

public static class StringConstants
{
  public const string PropertyAlreadyObserved = " is already being observed.";
  public const string AdapterInvalidExceptionMsg = "The object must be of type '{0}' in order to use the current region adapter.";
  public const string NotImplementInpc = "Trying to subscribe PropertyChanged listener in object that owns '{0}' property, but the object does not implements INotifyPropertyChanged.";
  public const string NotSupportedExceptionMsg = "Operation not supported for the given expression type. Only MemberExpression and ConstantExpression are currently supported.";
  public const string InvalidDelegateRerefenceTypeException = "Invalid Delegate Reference Type Exception";
  public const string CannotChangeRegionNameException = "Cannot change the region name once is set. The current region name is '{0}'.";
  public const string RegionNameCannotBeEmptyExceptionMsg = "The region name cannot be null or empty.";
  public const string RegionNameExistsException = "Region with the given name is already registered: {0}";
  public const string RegionManagerWithDifferentNameException = "The region being added already has a name of '{0}' and cannot be added to the region manager with a different name ('{1}').";
  public const string RegionNotFound = "This RegionManager does not contain a Region with the name '{0}'.";
  public const string CannotCreateNavigationTarget = "Cannot create navigation target '{0}'.";
  public const string CannotRegisterCompositeCommandInItself = "Cannot register a CompositeCommand in itself.";
  public const string CannotRegisterSameCommandTwice = "Cannot register the same command twice in the same CompositeCommand.";
  public const string CanOnlyAddTypesThatInheritIFromRegionBehavior = "Type '{0}' does not implement from IRegionBehavior.";
  public const string ConfigurationStoreCannotBeNull = "The ConfigurationStore cannot contain a null value.";
  public const string ContentControlHasContentException = "ContentControl's Content property is not empty. \r\n    This control is being associated with a region, but the control is already bound to something else. \r\n    If you did not explicitly set the control's Content property, \r\n    this exception may be caused by a change in the value of the inherited RegionManager attached property.";
  public const string CyclicDependencyFound = "At least one cyclic dependency has been found in the module catalog. Cycles in the module dependencies must be avoided.";
  public const string DependencyOnMissingModule = "A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}";
  public const string DeactiveNotPossibleException = "Deactivation is not possible in this type of region.";
  public const string DefaultDebugLoggerPattern = "{1}: {2}. Priority: {3}. Timestamp:{0:u}.";
  public const string DefaultTextLoggerPattern = "{1}: {2}. Priority: {3}. Timestamp:{0:u}.";
  public const string DelegateCommandDelegatesCannotBeNull = "Neither the executeMethod nor the canExecuteMethod delegates can be null.";
  public const string ViewNotInRegionException = "The region does not contain the specified view.";
  public const string ValueNotFound = "{0} not found.";
  public const string ValueMustBeOfTypeModuleInfo = "The value must be of type ModuleInfo.";
  public const string DelegateCommandDelegatesCannotBeNull1 = "Neither the executeMethod nor the canExecuteMethod delegates can be null.";
  public const string DelegateCommandInvalidGenericPayloadType = "T for DelegateCommand<T> is not an object nor Nullable.";
  public const string DependencyForUnknownModule = "Cannot add dependency for unknown module {0}";
  public const string DirectoryNotFound = "Directory {0} was not found.";
  public const string DuplicatedModule = "A duplicated module with name {0} has been found by the loader.";
  public const string DuplicatedModuleGroup = "A duplicated module group with name {0} has been found by the loader.";
  public const string EventAggregatorNotConstructedOnUIThread = "To use the UIThread option for subscribing, the EventAggregator must be constructed on the UI thread.";
  public const string FailedToGetType = "Unable to retrieve the module type {0} from the loaded assemblies.  You may need to specify a more fully-qualified type name.";
  public const string FailedToLoadModule = "An exception occurred while initializing module '{0}'. \r\n    - The exception message was: {2}\r\n    - The Assembly that the module was trying to be loaded from was:{1}\r\n    Check the InnerException property of the exception for more information. If the exception occurred while creating an object in a DI container, you can exception.GetRootException() to help locate the root cause of the problem.";
  public const string FailedToLoadModuleNoAssemblyInfo = "An exception occurred while initializing module '{0}'. \r\n- The exception message was: {1}\r\nCheck the InnerException property of the exception for more information. If the exception occurred \r\nwhile creating an object in a DI container, you can exception.GetRootException() to help locate the root cause of the problem.";
  public const string FailedToRetrieveModule = "Failed to load type for module {0}. \r\nError was: {1}.";
  public const string HostControlCannotBeNull = "HostControl cannot have null value when behavior attaches.";
  public const string HostControlCannotBeSetAfterAttach = "The HostControl property cannot be set after Attach method has been called.";
  public const string HostControlMustBeATabControl = "HostControl type must be a TabControl.";
  public const string IEnumeratorObsolete = "The IModuleEnumerator interface is no longer used and has been replaced by ModuleCatalog.";
  public const string InvalidArgumentAssemblyUri = "The argument must be a valid absolute Uri to an assembly file.";
  public const string InvalidPropertyNameException = "The entity does not contain a property with that name";
  public const string ItemsControlHasItemsSourceException = "ItemsControl's ItemsSource property is not empty. \r\n    This control is being associated with a region, but the control is already bound to something else. \r\n    If you did not explicitly set the control's ItemSource property, \r\n    this exception may be caused by a change in the value of the inherited RegionManager attached property.";
  public const string MappingExistsException = "Mapping with the given type is already registered: {0}.";
  public const string ModuleDependenciesNotMetInGroup = "Module {0} depends on other modules that don't belong to the same group.";
  public const string ModuleNotFound = "Module {0} was not found in the catalog.";
  public const string ModulePathCannotBeNullOrEmpty = "The ModulePath cannot contain a null value or be empty";
  public const string ModuleTypeNotFound = "Failed to load type '{0}' from assembly '{1}'.";
  public const string MustBeModuleGroupCatalog = "The ModuleCatalog must implement IModuleGroupCatalog to add groups";
  public const string NavigationInProgress = "Navigation is already in progress on region with name '{0}'.";
  public const string NavigationServiceHasNoRegion = "Navigation cannot proceed until a region is set for the RegionNavigationService.";
  public const string NoRegionAdapterException = "The IRegionAdapter for the type {0} is not registered in the region adapter mappings. You can register an IRegionAdapter for this control by overriding the ConfigureRegionAdapterMappings method in the bootstrapper.";
  public const string NoRetrieverCanRetrieveModule = "There is currently no moduleTypeLoader in the ModuleManager that can retrieve the specified module.";
  public const string OnViewRegisteredException = "An exception has occurred while trying to add a view to region '{0}'. \r\n    - The most likely causing exception was was: '{1}'.\r\n    But also check the InnerExceptions for more detail or call .GetRootException().";
  public const string PropertySupport_ExpressionNotProperty_Exception = "The member access expression does not access a property.";
  public const string PropertySupport_NotMemberAccessExpression_Exception = "The expression is not a member access expression.";
  public const string PropertySupport_StaticExpression_Exception = "The referenced property is a static property.";
  public const string RegionBehaviorAttachCannotBeCallWithNullRegion = "The Attach method cannot be called when Region property is null.";
  public const string RegionBehaviorRegionCannotBeSetAfterAttach = "The Region property cannot be set after Attach method has been called.";
  public const string RegionCreationExceptionMsg = "An exception occurred while creating a region with name '{0}'. The exception was: {1}. ";
  public const string RegionNotInRegionManagerException = "The region manager does not contain the {0} region.";
  public const string RegionViewExistsException = "View already exists in region.";
  public const string RegionViewNameExistsException = "View with name '{0}' already exists in the region.";
  public const string StartupModuleDependsOnAnOnDemandModule = "Module {0} is marked for automatic initialization when the application starts, but it depends on modules that are marked as OnDemand initialization. To fix this error, mark the dependency modules for InitializationMode=WhenAvailable, or remove this validation by extending the ModuleCatalog class.";
  public const string StringCannotBeNullOrEmpty = "The provided String argument {0} must not be null or empty.";
  public const string TypeWithKeyNotRegistered = "No BehaviorType with key '{0}' was registered.";
  public const string UpdateRegionException = "An exception occurred while trying to create region objects. \r\n    - The most likely causing exception was: '{0}'.\r\n    But also check the InnerExceptions for more detail or call .GetRootException().";
}